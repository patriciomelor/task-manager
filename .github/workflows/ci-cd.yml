# .github/workflows/ci-cd.yml (Versión optimizada para Cloud Run y Monorepo)

name: CI/CD Pipeline - Task Manager

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

env:
  # Configuración global de la región de GCP y el nombre del repositorio
  GCP_REGION: us-central1
  AR_REPO_NAME: task-manager-repo

jobs:
  # FASE 1: INTEGRACIÓN CONTINUA (Tests y Build del código)
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # --- [ Optimización de Cache ] ---

      - name: Cache dependencies (Backend)
        uses: actions/cache@v4
        with:
          path: |
            backend/users/node_modules
            backend/tasks/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/users/package-lock.json', 'backend/tasks/package-lock.json') }}

      - name: Cache dependencies (Frontend)
        uses: actions/cache@v4
        with:
          path: frontend/web-client/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/web-client/package-lock.json') }}

      # --- [ Instalación y Pruebas ] ---

      - name: Install & Test Users Service
        run: cd backend/users && npm ci && npm run build
        # Quitar '&& npm run build' si quieres separarlo del CI
      
      - name: Install & Test Tasks Service
        run: cd backend/tasks && npm ci && npm run build

      - name: Install & Build Web Client
        run: cd frontend/web-client && npm ci && npm run build
          
  # --------------------------------------------------------------------------------------------------------------------------------------------------
  
  # FASE 2: DESPLIEGUE CONTINUO (Build y Push a Google Cloud Run)
  cd:
    needs: ci
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      # 1. Autenticación en Google Cloud (Usa el Service Account Key)
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      # 2. Configurar Docker para Artifact Registry (Necesario para el push)
      - name: Set up Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      # --- [ Build, Tag y Push a Artifact Registry ] ---
      
      # Genera la URI base del registro: [region]-docker.pkg.dev/[project-id]/[repo-name]
      - name: Set Artifact Registry URI
        id: ar_uri
        run: echo "URI=${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.AR_REPO_NAME }}" >> $GITHUB_OUTPUT

      # 3. Build y Push de Users Service
      - name: Build and Push Users Service
        run: |
          IMAGE_URI=${{ steps.ar_uri.outputs.URI }}/users:latest
          docker build -t $IMAGE_URI ./backend/users
          docker push $IMAGE_URI

      # 4. Build y Push de Tasks Service
      - name: Build and Push Tasks Service
        run: |
          IMAGE_URI=${{ steps.ar_uri.outputs.URI }}/tasks:latest
          docker build -t $IMAGE_URI ./backend/tasks
          docker push $IMAGE_URI
          
      # 5. Build y Push de Web Client
      - name: Build and Push Web Client
        run: |
          IMAGE_URI=${{ steps.ar_uri.outputs.URI }}/web:latest
          docker build -t $IMAGE_URI ./frontend/web-client
          docker push $IMAGE_URI

      # --- [ Despliegue en Cloud Run (Free Tier) ] ---
      
      # 6. Despliegue del Users Service (Authentication/Auth)
      - name: Deploy Users Service to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: users-service
          region: ${{ env.GCP_REGION }}
          image: ${{ steps.ar_uri.outputs.URI }}/users:latest
          
          # ¡CORRECCIÓN! Usar 'flags' y 'env_vars'
          flags: --min-instances 0  # <--- Corregido
          env_vars: | # <--- Corregido
            MONGODB_ATLAS_URI=${{ secrets.MONGODB_ATLAS_URI }}
            PORT=8080 

      # 7. Despliegue del Tasks Service (Tareas)
      - name: Deploy Tasks Service to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: tasks-service
          region: ${{ env.GCP_REGION }}
          image: ${{ steps.ar_uri.outputs.URI }}/tasks:latest
          min-instances: 0
          # Aquí se comunica con el servicio de Usuarios
          env-vars: |
            MONGODB_ATLAS_URI=${{ secrets.MONGODB_ATLAS_URI }}
            USERS_SERVICE_URL=http://users-service.{{ env.GCP_REGION }}.run.app # URL interna de Cloud Run
            PORT=8080
            
      # 8. Despliegue del Web Client (Frontend)
      - name: Deploy Web Client to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: web-client
          region: ${{ env.GCP_REGION }}
          image: ${{ steps.ar_uri.outputs.URI }}/web:latest
          min-instances: 0
          # El frontend necesita saber la URL pública del backend
          env-vars: |
            NEXT_PUBLIC_USERS_API_URL=https://users-service-${{ secrets.GCP_PROJECT_ID }}.${{ env.GCP_REGION }}.run.app
            NEXT_PUBLIC_TASKS_API_URL=https://tasks-service-${{ secrets.GCP_PROJECT_ID }}.${{ env.GCP_REGION }}.run.app
            PORT=8080